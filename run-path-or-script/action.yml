name: "Run Path or Script"
description: >-
  This action takes a string input and determines whether it's a file path or a 
  script. If it's a file path, it executes the file found there. If it's a 
  script, it runs the script.
author: "Fardjad Davari"
inputs:
  path-or-script:
    description: >-
      The input string, which can be a file path or a script to execute.
    required: true
  fail-on-non-zero-exit-code:
    description: >-
      Specifies whether the action should fail if the executed script returns 
      a non-zero exit code.
    default: "true"
outputs:
  is-path:
    description: >-
      Indicates whether the input was identified as a file path ("true") or a 
      script ("false").
    value: "${{ steps.run.outputs.is-path }}"
  exit-code:
    description: "The exit code returned by the executed script or file."
    value: "${{ steps.run.outputs.exit-code }}"
  stdout:
    description: "The standard output produced by the executed script or file."
    value: "${{ steps.run.outputs.stdout }}"
  stderr:
    description: "The standard error output from the executed script or file."
    value: "${{ steps.run.outputs.stderr }}"
runs:
  using: "composite"
  steps:
    - name: Check if script is a path
      id: check-if-path
      shell: bash
      run: |
        # Check for the shebang
        if [[ $(echo "${INPUT_PATH_OR_SCRIPT}" | head -n 1) == "#!"* ]]; then
          echo "is-path=false" >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        # Check for multiple lines
        if [ $(echo "${INPUT_PATH_OR_SCRIPT}" | wc -l) -gt 1 ]; then
          echo "is-path=false" >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        if [ ! -f "${INPUT_PATH_OR_SCRIPT}" ]; then
          echo "is-path=false" >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        echo "is-path=true" >> "${GITHUB_OUTPUT}"
      env:
        INPUT_PATH_OR_SCRIPT: ${{ inputs.path-or-script }}
    - name: Set paths for temporary files
      id: set-temp-paths
      shell: bash
      run: |
        PATH_PREFIX="${RUNNER_TEMP}/run-path-or-script-${{ github.run_id }}-${{ github.run_attempt }}"

        echo "path-prefix=${PATH_PREFIX}" >> "${GITHUB_OUTPUT}"

        echo "stdout-path=${PATH_PREFIX}.stdout" >> "${GITHUB_OUTPUT}"

        echo "stderr-path=${PATH_PREFIX}.stderr" >> "${GITHUB_OUTPUT}"
    - name: Create a script file if the input is not a path
      id: create-script-if-not-path
      if: steps.check-if-path.outputs.is-path == 'false'
      shell: bash
      run: |
        echo "${INPUT_PATH_OR_SCRIPT}" > "${{ steps.set-temp-paths.outputs.path-prefix }}"
        chmod +x "${{ steps.set-temp-paths.outputs.path-prefix }}"
      env:
        INPUT_PATH_OR_SCRIPT: ${{ inputs.path-or-script }}
    - name: Normalize the script path
      id: normalize-script-path
      shell: bash
      run: |
        if [ "${{ steps.check-if-path.outputs.is-path }}" == "true" ]; then
          echo "script-path=${INPUT_PATH_OR_SCRIPT}" >> "${GITHUB_OUTPUT}"
        else
          echo "script-path=${{ steps.set-temp-paths.outputs.path-prefix }}" >> "${GITHUB_OUTPUT}"
        fi
      env:
        INPUT_PATH_OR_SCRIPT: ${{ inputs.path-or-script }}
    - name: Run the script
      id: run
      shell: bash
      run: |
        EXIT_CODE="0"
        "${SCRIPT_PATH}" > "${STDOUT_PATH}" 2> "${STDERR_PATH}" || EXIT_CODE="$?"

        cat "${STDOUT_PATH}"
        cat "${STDERR_PATH}" >&2

        echo "is-path=${IS_PATH}" >> "${GITHUB_OUTPUT}"
        echo "exit-code=${EXIT_CODE}" >> "${GITHUB_OUTPUT}"

        echo "stdout<<EOF" >> "${GITHUB_OUTPUT}"
        cat "${STDOUT_PATH}" >> "${GITHUB_OUTPUT}"
        echo "EOF" >> "${GITHUB_OUTPUT}"

        echo "stderr<<EOF" >> "${GITHUB_OUTPUT}"
        cat "${STDERR_PATH}" >> "${GITHUB_OUTPUT}"
        echo "EOF" >> "${GITHUB_OUTPUT}"

        if [ "${IS_PATH}" == "false" ]; then
          rm -f "${SCRIPT_PATH}"
        fi

        rm -f "${STDOUT_PATH}" "${STDERR_PATH}"
      env:
        IS_PATH: ${{ steps.check-if-path.outputs.is-path }}
        SCRIPT_PATH: ${{ steps.normalize-script-path.outputs.script-path }}
        STDOUT_PATH: ${{ steps.set-temp-paths.outputs.stdout-path }}
        STDERR_PATH: ${{ steps.set-temp-paths.outputs.stderr-path }}
    - name: Fail if the script exits with a non-zero code
      id: exit-code
      if: inputs.fail-on-non-zero-exit-code == 'true'
      shell: bash
      run: |
        exit "${{ steps.run.outputs.exit-code }}"
