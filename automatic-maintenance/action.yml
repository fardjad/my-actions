name: "Automatic maintenance"
description: "Performs automatic maintenance tasks on my repositories."
author: "Fardjad Davari"
inputs:
  script-base-path:
    description: "The base path to the scripts."
    default: ".github/automatic-maintenance"
    # what's expected in the base-path
    # - check -> Check if the repository needs maintenance. If so, it should exit with a non-zero status code.
    # - action -> Perform the maintenance tasks
    # - commit -> Commit the desired changes (first line is the title, second line should always be empty, and the rest is the body).
  github-token:
    description: "The GitHub PAT to use for creating, approving, and merging the PR with the changes."
outputs:
  maintenance-needed:
    description: "A boolean indicating whether the repository needed maintenance."
    value: ${{ steps.execute.outputs.maintenance-needed }}
  commit-message:
    description: "The output of the commit script."
    value: ${{ steps.execute.outputs.commit-message }}
runs:
  using: "composite"
  steps:
    - id: setup-git
      shell: bash
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local pull.rebase true

        # work around "insufficient permission for adding an object to repository database .git/object" issue
        sudo chmod -R ugo+rwX .git
    - id: execute
      shell: bash
      run: |
        set -x

        if ./${SCRIPT_BASE_PATH}/check; then
          echo "maintenance-needed=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "maintenance-needed=true" >> $GITHUB_OUTPUT

        REMOTE_REPO="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        CURRENT_BRANCH="$(git branch --show-current)"
        NEW_BRANCH="automatic-maintenance-$(git rev-parse --short HEAD)"
        git pull "${REMOTE_REPO}" "${CURRENT_BRANCH}"
        git checkout -b "${NEW_BRANCH}"

        if ! ./${SCRIPT_BASE_PATH}/action; then
          echo "::error::Failed to run the action script."
          exit 1
        fi

        PREVIOUS_COMMIT_HASH="$(git rev-parse HEAD)"

        if ! ./${SCRIPT_BASE_PATH}/commit; then
          echo "::error:: Failed to run the commit script."
          exit 1
        fi

        CURRENT_COMMIT_HASH="$(git rev-parse HEAD)"

        if [ "$PREVIOUS_COMMIT_HASH" = "$CURRENT_COMMIT_HASH" ]; then
          echo "::warning:: No changes were made."
          exit 0
        fi

        COMMIT_MESSAGE="$(git log -1 --pretty=format:%B)"

        echo "commit-message=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT

        TITLE="$(echo "$COMMIT_MESSAGE" | head -n 1)"
        BODY="$(echo "$COMMIT_MESSAGE" | tail -n +3)"

        if git ls-remote --exit-code --heads "${REMOTE_REPO}" "${NEW_BRANCH}" > /dev/null; then
          echo "::warning:: PR already exists."
          exit 0
        fi

        git push "${REMOTE_REPO}" "HEAD:${NEW_BRANCH}"

        PR_URL=$(gh pr create -B "${CURRENT_BRANCH}" -H "${NEW_BRANCH}" -f)
        echo "pr-url=${PR_URL}" >> $GITHUB_OUTPUT
      env:
        SCRIPT_BASE_PATH: ${{ inputs.script-base-path }}
        GH_TOKEN: ${{ github.token }}
    - id: approve-and-merge-pr
      if: steps.execute.outputs.pr-url
      shell: bash
      run: |
        gh pr review --approve "${PR_URL}"
        gh pr merge --auto --delete-branch --rebase "${PR_URL}"
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_URL: ${{ steps.execute.outputs.pr-url }}
