<%
const yaml = await import("yaml");
const fs = await import("fs");

const action = yaml.parse(fs.readFileSync("action.yml", "utf-8"));
%>

# <%= action.name %>

## Synopsis

<%= action.description %>

By default, this action updates the dependencies in the `package.json` file 
and merges the changes to the target branch with a commit message that includes 
the list of updated packages.

## Inputs

Variables ending with the suffix `-script` can either be a file path to a script
or a multi-line string that starts with a shebang line.

<%- inputsToMarkdownTable(action.inputs) %>

## Building Blocks

This action is very opinionated and may not be suitable for all use cases.
If you need more flexibility, you can use [its main building 
block](../automatic-maintenance) directly or use 
[these other smaller actions](../) in this repository.

## Example Usage

```yaml
name: update-dependencies

on:
  workflow_dispatch: {}

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: "lts/*"
          check-latest: true
      - name: Cache node modules
        uses: actions/cache@main
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - uses: fardjad/my-actions/automatic-npm-check-updates@main
        with:
          github-token: ${{ secrets.GH_PAT }}
```
